import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate, Link } from 'react-router-dom';
import {
  getProductFilter,    // API filter sản phẩm tổng hợp
  getCategory,
  getImages,
  getDiscounts,
  getAuthor,
  getPublishers,
  getFilteredAuthors,
  getFilteredPublishers
} from '../api/server';
import { useCart } from "./context/cartContext";
import '../asset/css/product.css';

const Product = () => {
  // --- 1. Đọc query từ URL để khởi tạo state ngay từ đầu ---
  const location = useLocation();
  const navigate = useNavigate();
  const queryParams = new URLSearchParams(location.search);
  const initialCategory = queryParams.get("category") || null;
  // Ban đầu, nếu có query "author", ta chuyển thành mảng bằng cách tách chuỗi
  const initialAuthors = queryParams.get("author")
    ? queryParams.get("author").split(",")
    : [];
  const initialPublishers = queryParams.get("publisher")
    ? queryParams.get("publisher").split(",")
    : [];
  const initialPage = parseInt(queryParams.get("page"), 10) || 1;
  const limit = 20; // Số sản phẩm mỗi trang

  // Khởi tạo state từ URL
  const [selectedCategory, setSelectedCategory] = useState(initialCategory);
  const [selectedAuthors, setSelectedAuthors] = useState(initialAuthors);
  const [selectedPublishers, setSelectedPublishers] = useState(initialPublishers);
  const [currentPage, setCurrentPage] = useState(initialPage);

  // --- 2. Các state dữ liệu khác ---
  const [products, setProducts] = useState([]);
  const [categoryList, setCategoryList] = useState([]);  // cho sidebar & banner
  const [images, setImages] = useState([]);
  const [discounts, setDiscounts] = useState([]);
  const [authorList, setAuthorList] = useState([]);        // cho sidebar
  const [publisherList, setPublisherList] = useState([]);  // cho sidebar

  const { addToCart } = useCart();

  // Hàm applyFilters: cập nhật URL với các tỉnh lọc hiện hành
  const applyFilters = () => {
    const params = new URLSearchParams();
    if (selectedCategory) params.set("category", selectedCategory);
    if (selectedAuthors.length > 0) params.set("author", selectedAuthors.join(","));
    if (selectedPublishers.length > 0) params.set("publisher", selectedPublishers.join(","));
    params.set("page", 1);
    params.set("limit", limit);
    navigate(`/product?${params.toString()}`);
  };

  // --- 3. Đồng bộ state khi URL thay đổi ---
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const cat = params.get("category") || null;
    const auth = params.get("author") || "";
    const pub = params.get("publisher") || "";
    const page = parseInt(params.get("page"), 10) || 1;

    if (cat !== selectedCategory) setSelectedCategory(cat);

    // Chuyển đổi chuỗi tác giả thành mảng
    const authArray = auth ? auth.split(",") : [];
    if (JSON.stringify(authArray) !== JSON.stringify(selectedAuthors)) {
      setSelectedAuthors(authArray);
    }

    // Tương tự cho nhà xuất bản:
    const pubArray = pub ? pub.split(",") : [];
    if (JSON.stringify(pubArray) !== JSON.stringify(selectedPublishers)) {
      setSelectedPublishers(pubArray);
    }

    if (page !== currentPage) setCurrentPage(page);
  }, [location.search]);

  // --- 4. Load dữ liệu cố định: danh mục, tác giả, nhà xuất bản, giảm giá, hình ảnh ---
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [catData, discData, imgData] = await Promise.all([
          getCategory(),
          getDiscounts(),
          getImages(),
        ]);
        const productCategories = catData.filter(cat => cat.type === 'Product');
        setCategoryList(productCategories);
        setDiscounts(discData);
        setImages(imgData);
      } catch (error) {
        console.error("Lỗi khi load dữ liệu cố định:", error);
      }
    };
    fetchData();
  }, []);
  // --- 4.1 Load dữ liệu cố định: (Cập nhật danh sách tác giả/nhà xuất bản theo category) ---
  useEffect(() => {
    const fetchFilteredLists = async () => {
      try {
        if (selectedCategory) {
          // Nếu có category đã chọn, gọi API filter cho tác giả và nhà xuất bản
          const [filteredAuth, filteredPub] = await Promise.all([
            getFilteredAuthors({ category: selectedCategory }),
            getFilteredPublishers({ category: selectedCategory }),
          ]);
          setAuthorList(filteredAuth);
          setPublisherList(filteredPub);
        } else {
          // Nếu không có category, load toàn bộ dữ liệu
          const [allAuth, allPub] = await Promise.all([
            getAuthor(),
            getPublishers(),
          ]);
          setAuthorList(allAuth);
          setPublisherList(allPub);
        }
      } catch (error) {
        console.error("Lỗi khi load tác giả/nhà xuất bản theo category:", error);
      }
    };

    fetchFilteredLists();
  }, [selectedCategory]);

  // --- 5. Load sản phẩm dựa trên filter ---
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        let params = { page: currentPage, limit };
        if (selectedCategory) params.category = selectedCategory;
        if (selectedAuthors.length > 0) params.author = selectedAuthors.join(",");
        if (selectedPublishers.length > 0) params.publisher = selectedPublishers.join(",");
        const productData = await getProductFilter(params);
        setProducts(productData);
      } catch (error) {
        console.error("Lỗi khi filter sản phẩm:", error);
      }
    };
    fetchProducts();
  }, [selectedCategory, selectedAuthors, selectedPublishers, currentPage]);

  // --- 6. Hàm thêm sản phẩm vào giỏ ---
  const addCart = (product, productImage) => {
    const data = {
      product,
      img: productImage?.url || "",
      quantity: 1,
    };
    addToCart(data);
  };

  // --- 7. Hàm chuyển trang: đảm bảo giữ lại các tham số filter ---
  const doSearch = (page) => {
    if (page !== currentPage) {
      setCurrentPage(page);
      const params = new URLSearchParams();
      if (selectedCategory) params.set("category", selectedCategory);
      if (selectedAuthors.length > 0) params.set("author", selectedAuthors.join(","));
      if (selectedPublishers.length > 0) params.set("publisher", selectedPublishers.join(","));
      params.set("page", page);
      params.set("limit", limit);
      navigate(`/product?${params.toString()}`);
    }
  };

  // --- 8. Hàm xử lý chọn filter từ sidebar ---
  const handleCategorySelect = (categoryId) => {
    setSelectedCategory(categoryId);
    setCurrentPage(1);
    const params = new URLSearchParams();
    if (categoryId) params.set("category", categoryId);
    if (selectedAuthors.length > 0) params.set("author", selectedAuthors.join(","));
    if (selectedPublishers.length > 0) params.set("publisher", selectedPublishers.join(","));
    params.set("page", 1);
    params.set("limit", limit);
    navigate(`/product?${params.toString()}`);
  };

  const handleAuthorToggle = (authorId) => {
    setSelectedAuthors(prev => {
      if (prev.includes(authorId)) {
        return prev.filter(id => id !== authorId);
      } else {
        return [...prev, authorId];
      }
    });
    setCurrentPage(1);
  };

  const handlePublisherToggle = (publisherId) => {
    setSelectedPublishers(prev => {
      if (prev.includes(publisherId)) {
        return prev.filter(id => id !== publisherId);
      } else {
        return [...prev, publisherId];
      }
    });
    setCurrentPage(1);
  };

  // --- 9. Tự động áp dụng filter khi các lựa chọn thay đổi (bạn cũng có thể dùng nút Apply Filter) ---
  useEffect(() => {
    applyFilters();
  }, [selectedCategory, selectedAuthors, selectedPublishers]);

  // --- 10. Tính toán tên để hiển thị trên banner ---
  const selectedCategoryName =
    selectedCategory && categoryList.length > 0
      ? categoryList.find(cat => cat._id === selectedCategory)?.name
      : null;
  const selectedAuthorName =
    selectedAuthors.length > 0 && authorList.length > 0
      ? authorList
        .filter(auth => selectedAuthors.includes(auth._id))
        .map(auth => auth.name)
        .join(", ")
      : null;
  const selectedPublisherName =
    selectedPublishers.length > 0 && publisherList.length > 0
      ? publisherList
        .filter(pub => selectedPublishers.includes(pub._id))
        .map(pub => pub.name)
        .join(", ")
      : null;

  return (
    <>
      {/* Banner */}
      <section className="banner">
        <div className="banner-overlay">
          <h1>Sản phẩm</h1>
          <p style={{ fontSize: 20, fontWeight: 400 }}>
            <Link to="/">Trang chủ</Link> &gt;{" "}
            {selectedCategory
              ? (selectedCategoryName || "Sản phẩm lọc theo danh mục")
              : "Tất cả sản phẩm"}
            {selectedAuthors.length > 0 && ` > Tác giả: ${selectedAuthorName}`}
            {selectedPublishers.length > 0 && ` > Nhà xuất bản: ${selectedPublisherName}`}
          </p>
        </div>
      </section>

      <div className="product-container">
        <aside className="sidebar">
          {/* Sidebar cho danh mục */}
          <div className="d-flex justify-content-between align-items-center" style={{ borderBottom: "1px solid rgb(190,188,188)" }}>
            <div className="title_top_menu_product tab_link_module">
              <h3 className="product-title-h3">
                <a href="#!" onClick={() => handleCategorySelect(null)}>Tất cả danh mục</a>
              </h3>
            </div>
          </div>
          <div className="sidebar-item">
            <ul>
              {categoryList && categoryList.length > 0 ? (
                categoryList.map((dm, index) => (
                  <li key={dm._id || index}>
                    <a href="#!" onClick={() => handleCategorySelect(dm._id)}>
                      {dm.name}
                    </a>
                  </li>
                ))
              ) : (
                <li>Đang tải danh mục...</li>
              )}
            </ul>
          </div>

          {/* Sidebar cho tác giả dạng checkbox */}
          <div className="d-flex justify-content-between align-items-center" style={{ borderBottom: "1px solid rgb(190,188,188)" }}>
            <div className="title_top_menu_product tab_link_module">
              <h3 className="product-title-h3">
                <a href="#!">Tất cả tác giả</a>
              </h3>
            </div>
          </div>
          <div className="sidebar-item">
            <ul>
              {authorList && authorList.length > 0 ? (
                authorList.map((au, index) => (
                  <li key={au._id || index}>
                    <label style={{ cursor: "pointer" }}>
                      <input
                        type="checkbox"
                        checked={selectedAuthors.includes(au._id)}
                        onChange={() => handleAuthorToggle(au._id)}
                      />{" "}
                      {au.name}
                    </label>
                  </li>
                ))
              ) : (
                <li>Đang tải tác giả...</li>
              )}
            </ul>
          </div>

          {/* Sidebar cho nhà xuất bản dạng checkbox */}
          <div className="d-flex justify-content-between align-items-center" style={{ borderBottom: "1px solid rgb(190,188,188)" }}>
            <div className="title_top_menu_product tab_link_module">
              <h3 className="product-title-h3">
                <a href='#!'>Nhà xuất bản</a>
              </h3>
            </div>
          </div>
          <div className="sidebar-item">
            <ul>
              {publisherList && publisherList.length > 0 ? (
                publisherList.map((pub, index) => (
                  <li key={pub._id || index}>
                    <label style={{ cursor: "pointer" }}>
                      <input
                        type="checkbox"
                        checked={selectedPublishers.includes(pub._id)}
                        onChange={() => handlePublisherToggle(pub._id)}
                      />{" "}
                      {pub.name}
                    </label>
                  </li>
                ))
              ) : (
                <li>Đang tải nhà xuất bản...</li>
              )}
            </ul>
          </div>

          {/* Sidebar cho giá tiền (giữ nguyên) */}
          <div className="d-flex justify-content-between align-items-center" style={{ borderBottom: "1px solid rgb(190,188,188)" }}>
            <div className="title_top_menu_product tab_link_module">
              <h3 className="product-title-h3">
                <a href="new-arrivals" title="Sản phẩm hot">Giá tiền</a>
              </h3>
            </div>
          </div>
          <div className="sidebar-item">
            <ul>
              <li>
                <input type="checkbox" /> Giá dưới 30.000đ
              </li>
              <li>
                <input type="checkbox" /> 40.000đ - 60.000đ
              </li>
              <li>
                <input type="checkbox" /> 60.000đ - 80.000đ
              </li>
              <li>
                <input type="checkbox" /> 80.000đ - 100.000đ
              </li>
              <li>
                <input type="checkbox" /> 100.000đ - 120.000đ
              </li>
              <li>
                <input type="checkbox" /> 120.000đ - 140.000đ
              </li>
              <li>
                <input type="checkbox" /> Giá trên 150.000đ
              </li>
            </ul>
          </div>
        </aside>

        <article>
          <div className="product-list" id="product-container">
            <div className="san-pham-page">
              <div className="products-wrapper-page">
                {products && products.length > 0 &&
                  images && images.length > 0 &&
                  authorList && authorList.length > 0 ? (
                  products.map(product => {
                    const productImage = images.find(image => image.productId === product._id);
                    const productDiscount = discounts.find(dis => dis && dis._id === product.discount);
                    const discountPercent = productDiscount ? Number(productDiscount.value) : 0;
                    const currentPrice = Number(product.price) * ((100 - discountPercent) / 100);
                    const productAuthor = authorList.find(author => author._id === product.author);
                    return (
                      <div className="san-pham-item-page" key={product._id}>
                        <img src={productImage?.url || ""} alt={product.name} />
                        <Link to={`/product/${product._id}`} className="sach-title">
                          {product.name}
                        </Link>
                        <div className="price-current">
                          {currentPrice.toLocaleString('vi-VN', {
                            style: 'currency',
                            currency: 'VND'
                          })}
                        </div>
                        <div className="shop-name-price-old">
                          <div className="price-old">
                            {Number(product.price).toLocaleString('vi-VN', {
                              style: 'currency',
                              currency: 'VND'
                            })}
                          </div>
                          <div className="shop-name">
                            {productAuthor ? productAuthor.name : ''}
                          </div>
                        </div>
                        <div className="add-to-cart" onClick={() => addCart(product, productImage)} style={{ cursor: 'pointer' }}>
                          THÊM VÀO GIỎ
                        </div>
                      </div>
                    );
                  })
                ) : (
                  <p>Đang tải sản phẩm...</p>
                )}
              </div>
            </div>
          </div>
          <div className="pagination" id="pagination-container" />
        </article>
      </div>

      <nav className="clearfix nav_pagi f-left w_100" style={{ margin: '20px 0' }}>
        <ul className="pagination clearfix">
          <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
            <a className="page-link" href="#!" onClick={() => currentPage > 1 && doSearch(currentPage - 1)}>
              <i className="fas fa-caret-left"></i>
            </a>
          </li>
          {[currentPage - 1, currentPage, currentPage + 1].map((page, index) => {
            if (page < 1) return null;
            return (
              <li key={index} className={`page-item ${page === currentPage ? 'active disabled' : ''}`}>
                <a className="page-link" href="#!" onClick={() => doSearch(page)}>
                  {page}
                </a>
              </li>
            );
          })}
          <li className="page-item">
            <a className="page-link" href="#!" onClick={() => doSearch(currentPage + 1)}>
              <i className="fas fa-caret-right"></i>
            </a>
          </li>
        </ul>
      </nav>

      <section className="intro-section">
        <div className="intro-container">
          <div className="intro-item">
            <i style={{ fontSize: '55px' }} className="bi bi-truck"></i>
            <p>
              <strong>MIỄN PHÍ VẬN CHUYỂN</strong>
              <br />
              Đơn hàng từ 500,000VND
            </p>
          </div>
          <div className="intro-item">
            <img
              src="https://media-hosting.imagekit.io//eddb2ce4d6a74b79/Last%2024%20Hours.png?Expires=1835360299&Key-Pair-Id=K2ZIVPTIP2VGHC&Signature=KlbhxUiQ5M2DKrj10oGxPShxmrHnmnwAYJXWu~ErW8XBqGhVkLqJxdL9y6LEX6mq6HU3fpUWnqEZ36XHkZrg1OD0Idmy76PcRrJIiJPoW0~4V2Bp1apPhLJZg4J2DQwi6lqsfgBKL7C47Hzjn8XMyv8Y~Q7IxQiPcUa8kTkUyqggKKzsQot8C95pH38B3MmkEBGfg6Ppnc2zLS4YWkegmKMitd7hroNslOYzse9KZNkkf77kiefirpeVEzRzg1OD0Idmy76PcRrJIiJPoW0~4V2Bp1apPhLJZg4J2DQwi6lqsfgBKL7C47Hzjn8XMyv8Y~Q7IxQiPcUa8kTkUyqggKKzsQot8C95pH38B3MmkEBGfg6Ppnc2zLS4YWkegmKMitd7hroNslOYzse9KZNkkf77kiefirpeVEzRzg1OD0Idmy76PcRrJIiJPoW0~4V2Bp1apPhLJZg4J2DQwi6lqsfgBKL7C47Hzjn8XMyv8Y"
              alt="Convenience"
            />
            <p>
              <strong>DỄ DÀNG TIỆN LỢI</strong>
              <br />
              Đặt sách theo yêu cầu
            </p>
          </div>
          <div className="intro-item">
            <i style={{ fontSize: '55px' }} className="bi bi-box"></i>
            <p>
              <strong>TÍCH ĐIỂM ĐỔI QUÀ</strong>
              <br />
              Nhận nhiều ưu đãi
            </p>
          </div>
          <div className="intro-item">
            <i style={{ fontSize: '55px', color: 'white' }} className="bi bi-star-fill"></i>
            <p>
              <strong>DỊCH VỤ 5 SAO</strong>
              <br />
              150+ rating từ Facebook
            </p>
          </div>
        </div>
      </section>
    </>
  );
};

export default Product;