import React, { useState, useEffect } from 'react';
import { getAllProduct, deleteProduct, getImages, getCategory, getAuthor, getPublishers, getDiscounts, getProductFilter } from '../../api/server';
import '../../asset/css/adminPro.css';
import CreatePro from './createPro';
import EditPro from './editPro';
import Modal from '../model';
import { useNavigate } from 'react-router-dom';

const ViewPro = () => {
  // State cho modal Thêm/Sửa sản phẩm
  const [showCreateModal, setShowCreateModal] = useState(false);
  const openCreateModal = () => setShowCreateModal(true);
  const closeCreateModal = () => setShowCreateModal(false);
  const navigate = useNavigate();

  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const openEditModal = (product) => {
    setSelectedProduct(product);
    setShowEditModal(true);
  };
  const closeEditModal = () => {
    setShowEditModal(false);
    setSelectedProduct(null);
  };

  // Các state dữ liệu
  const [products, setProducts] = useState([]);
  const [images, setImages] = useState([]);
  const [categoryName, setCategoryName] = useState([]);
  const [authorName, setAuthorName] = useState([]);
  const [publisherName, setPublisherName] = useState([]);
  const [discountValue, setDiscountValue] = useState([]);

  // State phân trang và filter
  const [currentPage, setCurrentPage] = useState(1);
  const limit = 20;
  const [selectedCategory, setSelectedCategory] = useState(""); // Lọc theo danh mục

  // Load sản phẩm: nếu có lọc thì gọi getProductFilter, không thì nhận toàn bộ sản phẩm
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        if (selectedCategory) {
          const params = { page: currentPage, limit, category: selectedCategory };
          const productsData = await getProductFilter(params);
          setProducts(productsData);
        } else {
          // Dùng luôn getProductFilter với filter rỗng
          const params = { page: currentPage, limit };
          const productsData = await getProductFilter(params);
          setProducts(productsData);
        }
      } catch (error) {
        console.error('Có lỗi xảy ra khi lấy sản phẩm:', error);
      }
    };
    fetchProducts();
  }, [currentPage, selectedCategory]);

  // Load hình ảnh sản phẩm
  useEffect(() => {
    const fetchImages = async () => {
      try {
        const imagesData = await getImages();
        setImages(imagesData);
      } catch (error) {
        console.error('Có lỗi xảy ra khi lấy hình ảnh:', error);
      }
    };
    fetchImages();
  }, []);

  // Load dữ liệu cố định: danh mục, tác giả, NXB và discount
  useEffect(() => {
    const fetchStaticData = async () => {
      try {
        const [catData, discData, authData, pubData] = await Promise.all([
          getCategory(),
          getDiscounts(),
          getAuthor(),
          getPublishers(),
        ]);
        // Chỉ lấy danh mục có type "Product"
        const productCategories = catData.filter(cat => cat.type === 'Product');
        setCategoryName(productCategories);
        setDiscountValue(discData);
        setAuthorName(authData);
        setPublisherName(pubData);
      } catch (error) {
        console.error('Có lỗi khi load dữ liệu cố định:', error);
      }
    };
    fetchStaticData();
  }, []);

  // Hàm xử lý thêm sản phẩm
  const handleCreateSuccess = async (newProduct) => {
    setProducts(prev => [...prev, newProduct]);
    const freshProducts = await getAllProduct();
    setProducts(freshProducts);
    const freshImages = await getImages();
    setImages(freshImages);
    const freshCategories = await getCategory();
    setCategoryName(freshCategories);
    const freshAuthors = await getAuthor();
    setAuthorName(freshAuthors);
    const freshPublishers = await getPublishers();
    setPublisherName(freshPublishers);
    const freshDiscount = await getDiscounts();
    setDiscountValue(freshDiscount);
  };

  // Hàm xử lý sửa sản phẩm thành công
  const handleEditSuccess = (updatedProduct) => {
    setProducts(prev =>
      prev.map(product =>
        product._id === updatedProduct._id ? updatedProduct : product
      )
    );
  };

  // Hàm xóa sản phẩm
  const handleDelete = async (id) => {
    try {
      await deleteProduct(id);
      alert('Sản phẩm đã được xóa');
      setProducts(prev => prev.filter(sp => sp._id !== id));
    } catch (error) {
      console.error('Có lỗi xảy ra khi xóa sản phẩm:', error);
    }
  };

  // Quản lý việc thay đổi dropdown filter
  const handleCategoryChange = (e) => {
    setSelectedCategory(e.target.value);
    setCurrentPage(1);
  };

  // Hàm chuyển trang
  const doSearch = (page) => {
    if (page !== currentPage) {
      setCurrentPage(page);
    }
  };

  return (
    <div>
      <div className="admin-product">
        {/* Phần thanh thao tác: Tiêu đề, form tìm kiếm và dropdown lọc */}
        <div className="admin-product__action" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <span className="admin-product__category-title">
            Sách: {products.length} Quyển Hiện Có
          </span>
          <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
            {/* Form tìm kiếm (nếu có) */}
            <form className="search-form">
              <input
                type="text"
                placeholder="Tìm kiếm sản phẩm..."
                className="searchyt mb-2"
              // Bạn có thể tích hợp thêm chức năng tìm kiếm nếu cần
              />
            </form>
            {/* Dropdown lọc theo danh mục */}
            <select onChange={handleCategoryChange} value={selectedCategory}>
              <option value="">Tất cả danh mục</option>
              {categoryName.map((cat) => (
                <option key={cat._id} value={cat._id}>
                  {cat.name}
                </option>
              ))}
            </select>
          </div>
          {/* Nút mở modal Thêm Sản Phẩm */}
          <button className="admin-product__btn-add-category" onClick={openCreateModal}>
            Thêm Sản Phẩm
          </button>
        </div>

        {/* Bảng sản phẩm */}
        <table className="admin-product__table">
          <thead>
            <tr>
              <th>STT</th>
              <th>Hình Ảnh</th>
              <th>Tên Sách</th>
              <th>Nhà NXB</th>
              <th>Giá</th>
              <th>Danh Mục</th>
              <th>Tác Giả</th>
              <th>Thao Tác</th>
            </tr>
          </thead>
          <tbody>
            {products && products.length > 0 && images && images.length > 0 ? (
              products.map((product, index) => {
                const productCate = categoryName.find(cate => cate._id === product.category);
                const productAuthor = authorName.find(auth => auth._id === product.author);
                const productPublisher = publisherName.find(pub => pub._id === product.publisher);
                const productImage = images.find(img => img.productId === product._id);
                return (
                  <tr key={product._id || index}>
                    <td>{index + 1}</td>
                    <td>
                      <img src={productImage ? productImage.url : ''} alt={product.name} />
                    </td>
                    <td className="book-name">{product.name}</td>
                    <td>{productPublisher ? productPublisher.name : ''}</td>
                    <td>
                      {Number(product.price).toLocaleString("vi-VN", {
                        style: "currency",
                        currency: "VND"
                      })}
                    </td>
                    <td>{productCate ? productCate.name : ''}</td>
                    <td>{productAuthor ? productAuthor.name : ''}</td>
                    <td className="action-button">
                      <button
                        onClick={() => {
                          if (window.confirm("Bạn có chắc chắn muốn xóa sản phẩm này không?")) {
                            handleDelete(product._id);
                          }
                        }}
                        className="trash"
                      >
                        <i className="bi bi-trash"></i>
                      </button>
                      <button onClick={() => openEditModal(product)} className="fix">
                        <i className="bi bi-pen"></i>
                      </button>
                    </td>
                  </tr>
                );
              })
            ) : (
              <tr>
                <td colSpan="8">Đang tải sản phẩm...</td>
              </tr>
            )}
          </tbody>
        </table>

        {/* Phân trang đơn giản */}
        <div className="clearfix_viewPro nav_pagi f-left w_100" style={{ margin: '20px 0' }}>
          <ul className="pagination clearfix">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <a className="page-link" href="#!" onClick={() => currentPage > 1 && doSearch(currentPage - 1)}>
                <i className="fas fa-caret-left"></i>
              </a>
            </li>
            {[currentPage - 1, currentPage, currentPage + 1].map((page, index) => {
              if (page < 1) return null;
              return (
                <li key={index} className={`page-item ${page === currentPage ? 'active disabled' : ''}`}>
                  <a
                    className='page-link'
                    href="#!"
                    onClick={(e) => {
                      e.preventDefault(); // Ngăn thay đổi hash
                      doSearch(page);       // Cập nhật state
                      navigate(`/viewPro?page=${page}${selectedCategory ? `&category=${selectedCategory}` : ""}`);
                    }}
                  >
                    {page}
                  </a>

                </li>
              );
            })}
            <li className="page-item">
              <a className="page-link" href="#!" onClick={() => doSearch(currentPage + 1)}>
                <i className="fas fa-caret-right"></i>
              </a>
            </li>
          </ul>
        </div>

      </div>



      {/* Modal CreatePro */}
      {showCreateModal && (
        <Modal onClose={closeCreateModal}>
          <CreatePro onClose={closeCreateModal} onCreateSuccess={handleCreateSuccess} />
        </Modal>
      )}

      {/* Modal EditPro */}
      {showEditModal && selectedProduct && (
        <Modal onClose={closeEditModal}>
          <EditPro initialData={selectedProduct} onClose={closeEditModal} onEditSuccess={handleEditSuccess} />
        </Modal>
      )}
    </div>
  );
};

export default ViewPro;